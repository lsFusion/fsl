MODULE SQLUtils;

REQUIRE System, Authentication, Service, Utils, Time;

runSQL 'Выполнить SQL' = CUSTOM 'lsfusion.erp.utils.RunSQLScriptActionProperty' (TEXT);

runJDBC 'Выполнить JDBC' = CUSTOM 'lsfusion.erp.utils.RunJDBCStatementActionProperty' (VARSTRING[100], TEXT);

vacuumTableAction 'Упаковать таблицу'(Table table) = {
    runSQL('VACUUM FULL ' + sid(table));
}

vacuumTablesAction 'Упаковать БД потаблично' () = {
    FOR table IS Table AND NOT skipVacuum(table) ORDER rows(table) DO {
        vacuumTableAction(table);
    }
    
    //vacuum части системных таблиц
    runSQL('VACUUM FULL pg_catalog.pg_statistic');
    runSQL('VACUUM FULL pg_catalog.pg_attribute');
    runSQL('VACUUM FULL pg_catalog.pg_class');
    runSQL('VACUUM FULL pg_catalog.pg_depend');
    runSQL('VACUUM FULL pg_catalog.pg_type');
    runSQL('VACUUM FULL pg_catalog.pg_constraint');
    runSQL('VACUUM FULL pg_catalog.pg_index');
    runSQL('VACUUM FULL pg_catalog.pg_proc');
    
    MESSAGE 'Упаковка БД была успешно завершена';
}

EXTEND FORM physicalModel PROPERTIES(t) vacuumTableAction BEFORE skipVacuum(t) GRID;
EXTEND FORM admin PROPERTIES() vacuumTablesAction;
DESIGN admin {
    database {
        MOVE PROPERTY(vacuumTablesAction());
    }
}

changeAllDates 'Сместить время всех свойств и ключей' = CUSTOM 'lsfusion.erp.utils.ChangeAllDatesActionProperty' ();
secondsChangeAllDates 'Интервал в секундах' = DATA INTEGER ();

EXTEND FORM admin PROPERTIES() changeAllDates, secondsChangeAllDates;
DESIGN admin {
    rightColumn {
        NEW changeDates {
            caption = 'Сместить время';
            MOVE PROPERTY(changeAllDates());
            MOVE PROPERTY(secondsChangeAllDates());
        }
    }
}

CLASS ProcessType 'Фильтр процессов' {
    all 'Все',
    activeAll 'Все активные',
    activeSQL 'Активные (SQL)',
    activeJava 'Активные (Java)'
}

FORM processTypes 'Фильтры процессов'
    OBJECTS t = ProcessType
    PROPERTIES(t) READONLY staticCaption
    
    LIST ProcessType OBJECT t
;

getActiveTasksAction 'Обновить список активных процессов' = CUSTOM 'lsfusion.erp.utils.GetActiveTasksActionProperty' () TOOLBAR;
getAllTasksAction 'Обновить список всех процессов' = CUSTOM 'lsfusion.erp.utils.GetAllTasksActionProperty' () TOOLBAR;
cancelActiveTaskAction 'Снять процесс' = CUSTOM 'lsfusion.erp.utils.CancelActiveTaskActionProperty' (INTEGER);
killActiveTaskAction 'Убить процесс' = CUSTOM 'lsfusion.erp.utils.KillActiveTaskActionProperty' (INTEGER);

idActiveTask 'ID процесса' = DATA LOCAL INTEGER (INTEGER);
queryActiveTask 'Запрос' = DATA LOCAL TEXT (INTEGER);
computerActiveTask 'Компьютер' = DATA LOCAL VARSTRING[100] (INTEGER);
userActiveTask 'Пользователь' = DATA LOCAL VARSTRING[100] (INTEGER);
addressUserActiveTask 'Адрес пользователя' = DATA LOCAL VARSTRING[100] (INTEGER);
dateTimeActiveTask 'Время запуска' = DATA LOCAL DATETIME (INTEGER);

FORM activeTasks 'Активные процессы'
    OBJECTS i = INTEGER
    PROPERTIES(i) READONLY idActiveTask, queryActiveTask, computerActiveTask, userActiveTask, addressUserActiveTask, dateTimeActiveTask
    PROPERTIES(i) TOOLBAR cancelActiveTaskAction, killActiveTaskAction
    PROPERTIES() TOOLBAR getActiveTasksAction TODRAW i, getAllTasksAction TODRAW i
    FILTERS idActiveTask(i)
;

getActiveBlocksAction 'Обновить список блокировок' = CUSTOM 'lsfusion.erp.utils.GetActiveBlocksActionProperty' () TOOLBAR;

processIdActiveBlock 'ID процесса блокировки' = DATA LOCAL INTEGER (INTEGER);
typeLockedObjectActiveBlock 'Тип заблокированного объекта' = DATA LOCAL VARSTRING[100] (INTEGER);
idLockedObjectActiveBlock 'ID заблокированного объекта' = DATA LOCAL VARSTRING[100] (INTEGER);
modeActiveBlock 'Уровень блокировки' = DATA LOCAL VARSTRING[100] (INTEGER);
grantedActiveBlock 'Granted' = DATA LOCAL BOOLEAN (INTEGER);

FORM activeBlocks 'Активные блокировки'
    OBJECTS i = INTEGER
    PROPERTIES(i) READONLY processIdActiveBlock, typeLockedObjectActiveBlock, idLockedObjectActiveBlock, modeActiveBlock, grantedActiveBlock
    PROPERTIES() getActiveBlocksAction TOOLBAR TODRAW i
    FILTERS processIdActiveBlock(i)
;

CLASS StateProcess 'Статус процесса' {
    active 'Active',
    idle 'Idle in transaction'
}

updateProcessMonitorAction 'Обновить монитор процессов' = CUSTOM 'lsfusion.erp.utils.UpdateProcessMonitorActionProperty' () TOOLBAR;
killJavaProcess 'Убить java-процесс' = CUSTOM 'lsfusion.erp.utils.KillJavaProcessActionProperty' (VARSTRING[10]);
killSQLProcess 'Убить SQL-процесс' = CUSTOM 'lsfusion.erp.utils.KillSQLProcessActionProperty' (VARSTRING[10]);
cancelJavaProcess 'Снять java-процесс' = CUSTOM 'lsfusion.erp.utils.CancelJavaProcessActionProperty' (VARSTRING[10]);
cancelSQLProcess 'Снять SQL-процесс' = CUSTOM 'lsfusion.erp.utils.CancelSQLProcessActionProperty' (VARSTRING[10]);

processType 'Фильтр процессов'= DATA LOCAL ProcessType();
nameProcessType 'Фильтр процессов' () = staticName(processType()) PREFCHARWIDTH 15;
captionProcessType 'Фильтр процессов' () = staticCaption(processType());
WHEN LOCAL CHANGED (processType()) DO EXEC updateProcessMonitorAction();
 
idThreadProcess 'ID потока процесса' = DATA LOCAL VARSTRING[10] (VARSTRING[10]);

nameComputerJavaProcess 'Компьютер (Java)' = DATA LOCAL VARSTRING[100] (VARSTRING[10]);
computerProcess 'Компьютер (SQL)' = DATA LOCAL INTEGER (VARSTRING[10]);
objValue (Computer i) = INTEGER(i AS Computer);
computerObject (value) = GROUP AGGR Computer computer BY objValue(computer);
nameComputerSQL 'Компьютер (SQL)' (VARSTRING[10] process) = hostname(computerObject(computerProcess(process)));
nameComputer 'Компьютер' (VARSTRING[10] process) = OVERRIDE nameComputerSQL(process), nameComputerJavaProcess(process);
  
nameUserJavaProcess 'Пользователь (Java)' = DATA LOCAL VARSTRING[100] (VARSTRING[10]);
userProcess 'Пользователь (SQL)' = DATA LOCAL INTEGER (VARSTRING[10]);
objValue (User i) = INTEGER(i AS User);
userObject (value) = GROUP AGGR User user BY objValue(user);
nameUserSQL 'Пользователь (SQL)' (VARSTRING[10] process) = name(userObject(userProcess(process)));
nameUser 'Пользователь' (VARSTRING[10] process) = OVERRIDE nameUserSQL(process), nameUserJavaProcess(process);
dateTimeCallProcess 'Время начала вызова' = DATA LOCAL DATETIME (VARSTRING[10]);

idSQLProcess 'ID процесса (SQL)' = DATA LOCAL INTEGER (VARSTRING[10]);
querySQLProcess 'Запрос (SQL)' = DATA LOCAL TEXT (VARSTRING[10]);
fullQuerySQLProcess 'Полный запрос (SQL)' = DATA LOCAL TEXT (VARSTRING[10]);
copyFullQuerySQLProcess 'Копировать полный запрос в буфер' (VARSTRING[10] i) = CUSTOM 'lsfusion.erp.utils.CopyFullQuerySQLProcessActionProperty' (VARSTRING[10]);
copiedFullQuerySQLProcess 'Скопированный полный запрос (SQL)' = DATA LOCAL TEXT (VARSTRING[10]);
addressUserSQLProcess 'Адрес пользователя (SQL)' = DATA LOCAL VARSTRING[100] (VARSTRING[10]);
dateTimeSQLProcess 'Время запуска (SQL)' = DATA LOCAL DATETIME (VARSTRING[10]);
isActiveSQLProcess 'Активный (SQL)' = DATA LOCAL BOOLEAN (VARSTRING[10]);
inTransactionSQLProcess 'В транзакции (SQL)' = DATA LOCAL BOOLEAN (VARSTRING[10]);
startTransactionSQLProcess 'Время начала транзакции (SQL)' = DATA LOCAL DATETIME (VARSTRING[10]);
attemptCountSQLProcess 'Номер попытки (SQL)' = DATA LOCAL VARSTRING[20] (VARSTRING[10]);
statusMessageSQLProcess 'Статус (SQL)' = DATA LOCAL TEXT (VARSTRING[10]);

lsfStackTraceProcess 'LSF след потока' = DATA LOCAL TEXT (VARSTRING[10]);
lastThreadAllocatedBytesProcess 'Память за последний интервал' = DATA LOCAL LONG (VARSTRING[10]);
threadAllocatedBytesProcess 'Выделенная память' = DATA LOCAL LONG (VARSTRING[10]);

stackTraceJavaProcess 'След java-потока (Java)' = DATA LOCAL TEXT (VARSTRING[10]);
hasStackTraceJavaProcess (VARSTRING[10] i) = stackTraceJavaProcess(i) AND i IS VARSTRING[10];
nameJavaProcess 'Имя java-потока (Java)' = DATA LOCAL VARSTRING[100] (VARSTRING[10]);
statusJavaProcess 'Статус (Java)' = DATA LOCAL VARSTRING[100] (VARSTRING[10]);
lockNameJavaProcess 'Блокировка (Java)' = DATA LOCAL VARSTRING[100] (VARSTRING[10]);

lockOwnerIdProcess 'ID блокирующего потока' = DATA LOCAL VARSTRING[10] (VARSTRING[10]);
lockOwnerNameProcess 'Блокирующий поток' = DATA LOCAL VARSTRING[100] (VARSTRING[10]);
isDisabledNestLoopProcess 'Disabled nested loop' = DATA LOCAL BOOLEAN (VARSTRING[10]);
queryTimeoutProcess 'Query Timeout' = DATA LOCAL INTEGER (VARSTRING[10]);
   
processThread (id) = GROUP AGGR VARSTRING[10] process BY idThreadProcess(process) WHERE process IS VARSTRING[10];
threadOwnerProcess (VARSTRING[10] i) = processThread(lockOwnerIdProcess(i));
                                                                                                                                                                                                                                                          
blockingProcess 'Уровень' (VARSTRING[10] child, VARSTRING[10] parent) = RECURSION 1l IF idThreadProcess(child) AND parent == child
                                                        STEP 1l IF parent == threadOwnerProcess($parent);                                                                                                                                                                                                                                                       
isBlockingProcess 'Блокируется' (VARSTRING[10] child, VARSTRING[10] parent) = TRUE IF blockingProcess(child, parent);
sumPlusOneBlocked  (process) = GROUP SUM 1 IF isBlockingProcess(VARSTRING[10] child, VARSTRING[10] parent) BY parent;
sumBlocked 'Кол-во заблокированных процессов' (VARSTRING[10] process) = sumPlusOneBlocked(process) - 1;
deadlock (process) = GROUP SUM 1 IF isBlockingProcess(VARSTRING[10] parent, VARSTRING[10] child) AND statusJavaProcess(child) != 'BLOCKED' BY parent;
isDeadlock 'Deadlock' (VARSTRING[10] process) = NOT deadlock(process) AND process IS VARSTRING[10];
sumPlusOneBlocking 'Кол-во блокирующих процессов' (process) = GROUP SUM 1 IF isBlockingProcess(VARSTRING[10] parent, VARSTRING[10] child) BY parent;
sumBlocking 'Глубина блокировки' (VARSTRING[10] process) = sumPlusOneBlocking(process) - 1;

activeSQLProcess (VARSTRING[10] i) = querySQLProcess(i) AND isActiveSQLProcess(i);
activeJavaBlockingProcess (VARSTRING[10] i) = statusJavaProcess(i) == 'RUNNABLE' AND hasStackTraceJavaProcess(i);
activeJavaProcess (VARSTRING[10] i) = activeJavaBlockingProcess(i)
                                   AND NOT (startsWith(stackTraceJavaProcess(i), 'java.net.DualStackPlainSocketImpl') == 1)
                                   AND NOT (startsWith(stackTraceJavaProcess(i), 'sun.awt.windows.WToolkit.eventLoop') == 1)
                                   AND NOT (startsWith(stackTraceJavaProcess(i), 'java.net.SocketInputStream.socketRead0') == 1)
                                   AND NOT (startsWith(stackTraceJavaProcess(i), 'sun.management.ThreadImpl.dumpThreads0') == 1)
                                   AND NOT (startsWith(stackTraceJavaProcess(i), 'java.net.SocketOutputStream.socketWrite') == 1)                                        
                                   AND NOT (startsWith(stackTraceJavaProcess(i), 'java.net.PlainSocketImpl') == 1)
                                   AND NOT (startsWith(stackTraceJavaProcess(i), 'java.io.FileInputStream.readBytes') == 1)
                                   AND NOT (startsWith(stackTraceJavaProcess(i), 'java.lang.UNIXProcess.waitForProcessExit') == 1);
activeBlockingProcess 'Активный' (VARSTRING[10] i) = activeSQLProcess(i) OR activeJavaBlockingProcess(i);
activeProcess 'Активный' (VARSTRING[10] i) = activeSQLProcess(i) OR activeJavaProcess(i);

blockedProcess 'Заблокированный' (VARSTRING[10] i) = statusJavaProcess(i) == 'BLOCKED' OR lockOwnerIdProcess(i);             

intToColor = FORMULA '(256*256*($1)+256*($2)+($3))::integer';

deltaDateTimeProcess(VARSTRING[10] i) = subtractSeconds(dateTimeSQLProcess(i), currentDateTime());
deltaTransactionProcess(VARSTRING[10] i) = subtractSeconds(startTransactionSQLProcess(i), currentDateTime());

red(VARSTRING[10] i) = 255 IF i IS VARSTRING[10];
green(VARSTRING[10] i) = CASE
                        WHEN deltaTransactionProcess(i) > 90 THEN 105
                        WHEN deltaTransactionProcess(i) > 80 THEN 125
                        WHEN deltaTransactionProcess(i) > 70 THEN 145
                        WHEN deltaTransactionProcess(i) > 60 THEN 165
                        WHEN deltaTransactionProcess(i) > 50 THEN 185
                        WHEN deltaTransactionProcess(i) > 40 THEN 205
                        WHEN deltaTransactionProcess(i) > 30 THEN 225
                        WHEN deltaTransactionProcess(i) > 20 THEN 245
                        WHEN i IS VARSTRING[10] THEN 255;
blue(VARSTRING[10] i) = CASE
                        WHEN deltaDateTimeProcess(i) > 90 THEN 0
                        WHEN deltaDateTimeProcess(i) > 80 THEN 30
                        WHEN deltaDateTimeProcess(i) > 70 THEN 60
                        WHEN deltaDateTimeProcess(i) > 60 THEN 90
                        WHEN deltaDateTimeProcess(i) > 50 THEN 120
                        WHEN deltaDateTimeProcess(i) > 40 THEN 150
                        WHEN deltaDateTimeProcess(i) > 30 THEN 180
                        WHEN deltaDateTimeProcess(i) > 20 THEN 210
                        WHEN i IS VARSTRING[10] THEN 240;
sqlColorProcess(VARSTRING[10] i) = COLOR(intToColor(red(i), green(i), blue(i)));
backgroundProcess(VARSTRING[10] i) = IF isActiveSQLProcess(i) OR startsWith(idThreadProcess(i), 's') THEN sqlColorProcess(i) ELSE RGB(240, 255, 255);  
                   
cancelProcess 'Снять процесс' (VARSTRING[10] i) = {
    IF idSQLProcess(i) THEN cancelSQLProcess(i); ELSE cancelJavaProcess(i);
    updateProcessMonitorAction();
}           
killProcess 'Убить процесс' (VARSTRING[10] i) = { 
    IF isActiveSQLProcess(i) THEN killSQLProcess(i); ELSE killJavaProcess(i);
    updateProcessMonitorAction();
}
showExtraButtons(VARSTRING[10] i) = idSQLProcess(i) AND NOT startsWith(idThreadProcess(i), 's');
               
//test1Action = CUSTOM 'lsfusion.erp.utils.TestActionProperty'();
//test2Action = CUSTOM 'lsfusion.erp.utils.Test2ActionProperty'();
//test3Action = CUSTOM 'lsfusion.erp.utils.Test3ActionProperty'();
//test4Action = CUSTOM 'lsfusion.erp.utils.Test4ActionProperty'();
              
setDefaultProcessType() = {
    processType() <- ProcessType.activeSQL;
}               
               
FORM processMonitor 'Монитор процессов'
    //PROPERTIES() test1Action, test2Action, test3Action, test4Action
    OBJECTS i = VARSTRING[10]
    PROPERTIES(i) READONLY BACKGROUND backgroundProcess(i) activeProcess, idThreadProcess, nameComputer, nameUser,
                           dateTimeCallProcess, querySQLProcess, dateTimeSQLProcess, isActiveSQLProcess, inTransactionSQLProcess, 
                           startTransactionSQLProcess, attemptCountSQLProcess, statusMessageSQLProcess,
                           addressUserSQLProcess, lsfStackTraceProcess, threadAllocatedBytesProcess, 
                           lastThreadAllocatedBytesProcess, nameJavaProcess, statusJavaProcess, lockNameJavaProcess, 
                           stackTraceJavaProcess, lockOwnerIdProcess, lockOwnerNameProcess, isDisabledNestLoopProcess, queryTimeoutProcess, 
                           idSQLProcess, copyFullQuerySQLProcess EDITABLE GRID
    PROPERTIES(i) TOOLBAR cancelProcess, killProcess, cancelJavaProcess SHOWIF showExtraButtons(i), killJavaProcess SHOWIF showExtraButtons(i)                       
    PROPERTIES(i) copiedFullQuerySQLProcess SHOWIF copiedFullQuerySQLProcess(i) PANEL
    FILTERS idThreadProcess(i), NOT statusJavaProcess(i) OR statusJavaProcess(i) != 'BLOCKED'
    EVENTS ON INIT setDefaultProcessType()
    
    TREE blocking i2 = VARSTRING[10] PARENT threadOwnerProcess
    PROPERTIES(i2) READONLY BACKGROUND backgroundProcess(i2) sumBlocked,
                            activeProcess, idThreadProcess, nameComputer, nameUser, dateTimeCallProcess,
                            querySQLProcess, dateTimeSQLProcess, isActiveSQLProcess, inTransactionSQLProcess, 
                            startTransactionSQLProcess, attemptCountSQLProcess, statusMessageSQLProcess,
                            addressUserSQLProcess, lsfStackTraceProcess, threadAllocatedBytesProcess, 
                            lastThreadAllocatedBytesProcess, nameJavaProcess, statusJavaProcess, lockNameJavaProcess, 
                            stackTraceJavaProcess, lockOwnerIdProcess, lockOwnerNameProcess, isDisabledNestLoopProcess, queryTimeoutProcess, 
                            idSQLProcess, copyFullQuerySQLProcess EDITABLE GRID 
    PROPERTIES(i2) TOOLBAR cancelProcess, killProcess, cancelJavaProcess SHOWIF isActiveSQLProcess(i2), killJavaProcess SHOWIF isActiveSQLProcess(i2)  
    FILTERS idThreadProcess(i2)
    FILTERGROUP filter FILTER 'Фильтр' (activeBlockingProcess(i2) AND sumBlocked(i2) > 0) OR (lockOwnerIdProcess(i2) AND lockOwnerIdProcess(i2) != '-1') DEFAULT   
    
    OBJECTS blocked = VARSTRING[10], blocking = VARSTRING[10]
    PROPERTIES(blocked) READONLY idThreadProcess, isDeadlock, 
                                 sumBlocking, nameComputer, nameUser, dateTimeCallProcess,
                                 querySQLProcess, dateTimeSQLProcess, isActiveSQLProcess, inTransactionSQLProcess, 
                                 startTransactionSQLProcess, attemptCountSQLProcess, statusMessageSQLProcess,
                                  lsfStackTraceProcess, threadAllocatedBytesProcess, 
                                 lastThreadAllocatedBytesProcess, nameJavaProcess, statusJavaProcess, 
                                 lockNameJavaProcess, stackTraceJavaProcess, lockOwnerIdProcess, lockOwnerNameProcess, isDisabledNestLoopProcess, 
                                 queryTimeoutProcess, idSQLProcess, copyFullQuerySQLProcess EDITABLE GRID 
    PROPERTIES(blocking) READONLY activeProcess, idThreadProcess, sumBlocking, nameComputer, nameUser, dateTimeCallProcess,
                                 querySQLProcess, dateTimeSQLProcess, isActiveSQLProcess, inTransactionSQLProcess, 
                                 startTransactionSQLProcess, attemptCountSQLProcess, statusMessageSQLProcess,
                                 addressUserSQLProcess, lsfStackTraceProcess, threadAllocatedBytesProcess, 
                                 lastThreadAllocatedBytesProcess, nameJavaProcess, statusJavaProcess,
                                 lockNameJavaProcess, stackTraceJavaProcess, lockOwnerIdProcess, lockOwnerNameProcess, isDisabledNestLoopProcess, 
                                 queryTimeoutProcess, idSQLProcess, copyFullQuerySQLProcess EDITABLE GRID 
    PROPERTIES(blocking) TOOLBAR cancelProcess, killProcess, cancelJavaProcess SHOWIF isActiveSQLProcess(blocking), killJavaProcess SHOWIF isActiveSQLProcess(blocking)                                   
    FILTERS idThreadProcess(blocked), sumBlocking(blocked) > 0, sumBlocked(blocking) > 0, isBlockingProcess(blocked, blocking) AND blocked != blocking
    FILTERGROUP nonBlocking FILTER 'Только не блокирующие' sumBlocked(blocked) == 0 OR isDeadlock(blocked) DEFAULT 
    ORDER BY sumBlocking(blocked) DESC, sumBlocking(blocking) DESC
    
    PROPERTIES() captionProcessType, updateProcessMonitorAction
;

DESIGN processMonitor {
    NEW top {
        type = TABBED;
        fill = 1;
        NEW allProcesses {
            fill = 1;
            caption = 'Все процессы';
            MOVE BOX(i) {
                fill = 3;
                caption = 'Процессы';
            }
            MOVE PROPERTY(copiedFullQuerySQLProcess(i)) {
                panelCaptionAbove = TRUE;
                fill = 1;
            }
        }
        NEW blockingProcesses {
            fill = 1;
            caption = 'Блокирующие';
            MOVE BOX(TREE blocking) {
                caption = 'Блокирующие процессы';
            }
        }
        NEW blockedProcesses {
            fill = 1;
            caption = 'Блокированные';
            MOVE BOX(blocked) {
                caption = 'Блокированные процессы';
            }
            MOVE BOX(blocking) {
                caption = 'Блокирующие процессы';
            }
        }
    } 
    NEW bottom {
        type = CONTAINERH;
        align = TRAILING;
        MOVE PROPERTY(captionProcessType());
        MOVE PROPERTY(updateProcessMonitorAction());
    }
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    systemEvents {
        ADD activeTasks;
        ADD activeBlocks;
        ADD processMonitor;
    }
}
