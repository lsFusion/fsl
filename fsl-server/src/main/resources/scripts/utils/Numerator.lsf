MODULE Numerator;

REQUIRE System, MasterData, DefaultData;

DESIGN options {
    commons {
        NEW numerator {
            caption = 'Нумератор';
        }
    }            
}
// ------------------------------------------- Нумераторы ----------------------------------------------- //

CLASS Numerator 'Нумератор';
TABLE numerator (Numerator);

name 'Наименование' = DATA VARISTRING[100](Numerator) MINCHARWIDTH 20 PREFCHARWIDTH 20;

series 'Серия' = DATA STRING[2] (Numerator) IN recognize FIXEDCHARWIDTH 3;

minValue 'Мин. значение' = DATA LONG (Numerator) IN recognize MINCHARWIDTH 15;
maxValue 'Макс. значение' = DATA LONG (Numerator) IN recognize MINCHARWIDTH 15;

stringLength 'Длина' = DATA INTEGER (Numerator) IN base;

curValue 'Тек. значение' = DATA LONG (Numerator) IN recognize MINCHARWIDTH 15;
curValue(Numerator numerator) <- minValue(numerator) WHEN SET(numerator IS Numerator);

lpadStringWithZero = FORMULA VARSTRING[28] PG 'lpad(CAST($1 AS text),$2,\'0\')', MS 'RIGHT(REPLICATE(\'0\', $2) + $1, $2)';

curStringValue 'Тек. значение (строка)' (Numerator numerator) = lpadStringWithZero(curValue(numerator), stringLength(numerator)) IN base;

incrementedValue = DATA LOCAL NESTED VARSTRING[28] ();

incrementValue 'Увеличить значение'(Numerator numerator) = {
	NEWSESSION {
	    incrementedValue() <- NULL;
	    IF curValue(numerator) >= maxValue(numerator) THEN
	        MESSAGE 'Счетчик нумератора ' + name(numerator) + ' достиг максимального значения. Обратитесь к администратору.';
	    ELSE {
	        APPLY {
	            incrementedValue() <- curStringValue(numerator);
	            curValue(numerator) <- curValue(numerator) + 1;
	        }
	    };
	}
};

// -------------- Генерация счетчиков на форме с целью выноса из общей транзакции для уменьшения вероятности CONFLICT UPDATE

@defineOption(generateNumberOnForm, 'Генерировать номер до общей транзакции', numerator);

META addEventGenerateNumberOnForm(form, o, object)
    generateNumber (###object ob)= {
        IF generateNumberOnForm() AND numerator(ob) AND NOT number(ob) THEN {
            incrementValue(numerator(ob));
            number(ob) <- incrementedValue();
            series(ob) <- series(numerator(ob));
        }
    }
    EXTEND FORM form
        EVENTS ON APPLY BEFORE generateNumber(o)
    ;
END

// --------------

incrementValueSession 'Увеличить значение'(Numerator numerator) = {
    IF curValue(numerator) >= maxValue(numerator) THEN
        MESSAGE 'Счетчик нумератора достиг максимального значения. Обратитесь к администратору.';
    ELSE
        ASSIGN curValue(numerator) <- curValue(numerator) + 1;
}

FORM numerator 'Нумератор'
    OBJECTS n = Numerator PANEL
    PROPERTIES(n) name, series, minValue, maxValue, stringLength, curValue, curStringValue

    EDIT Numerator OBJECT n
;

FORM numerators 'Нумераторы'
    OBJECTS n = Numerator
    PROPERTIES(n) READONLY name, series, minValue, maxValue, stringLength, curValue, curStringValue
    PROPERTIES(n)          NEWSESSION NEW, EDIT, DELETE 

    LIST Numerator OBJECT n
;

FORM defaultNumerators 'Нумераторы'
    OBJECTS n = Numerator
    PROPERTIES(n) READONLY name, series, minValue, maxValue, stringLength, curValue, curStringValue
    PROPERTIES(n)          NEWSESSION NEW, EDIT, DELETE 
;

DESIGN defaultNumerators {
    BOX {
        NEW defaultContainer AFTER BOX(n) {
            type = COLUMNS;
            columns = 3;
            caption = 'Нумераторы по умолчанию';
        }
    }
}

NAVIGATOR {
    masterData {
        ADD defaultNumerators;
    }
}

// --------------------------------------------- Макрос по объявлению нумерируемого объекта ---------------------------- //

GROUP numbered 'Нумератор' : recognize;

META defineNumberedAbstract(class)
    number 'Номер' = ABSTRACT VARSTRING[28] (class) IN numbered MATERIALIZED MINCHARWIDTH 7;
    series 'Серия' = ABSTRACT STRING[2] (class) IN numbered MATERIALIZED FIXEDCHARWIDTH 3; 

    seriesNumber 'Серия/Номер' (class o) = 
        CONCAT '', series(o), number(o) 
        MINCHARWIDTH 7 PREFCHARWIDTH 15 MAXCHARWIDTH 20 INDEXED MATERIALIZED;
        
END

useLoweredNumber 'Использовать нижний регистр для номера' = DATA BOOLEAN ();
useUpperedSeries 'Использовать верхний регистр для серии' = DATA BOOLEAN (); 
keepNumberSpaces 'Разрешить пробелы в номерах' = DATA BOOLEAN (); 

EXTEND FORM options
    PROPERTIES () useLoweredNumber, useUpperedSeries, keepNumberSpaces
;
DESIGN options{
    numerator {
        MOVE PROPERTY (useLoweredNumber());
        MOVE PROPERTY (useUpperedSeries());
        MOVE PROPERTY (keepNumberSpaces());
    }
}

META defineNumbered(class)
    number 'Номер' = DATA VARSTRING[28] (class) IN numbered INDEXED MINCHARWIDTH 7;
    series 'Серия' = DATA STRING[2] (class) IN numbered FIXEDCHARWIDTH 3;
     
    WHEN useLoweredNumber() AND CHANGED(number(class o))
         INLINE DO number(o) <- lower(number(o));
         
    WHEN useUpperedSeries() AND CHANGED(series(class o))
         INLINE DO series(o) <- upper(series(o));
    
    WHEN CHANGED(number(class o)) AND NOT keepNumberSpaces()
        INLINE DO number(o) <- replace(number(o), ' ', '');

    seriesNumber 'Серия/Номер' (class o) = 
        CONCAT '', series(o), number(o) 
        MINCHARWIDTH 7 PREFCHARWIDTH 15 MAXCHARWIDTH 20 INDEXED MATERIALIZED;
        
END

META defineNumerated(class)
    numerator 'Нумератор (ИД)' = DATA Numerator (class);
    nameNumerator 'Нумератор' (class o) = name(numerator(o)) IN numbered MINCHARWIDTH 7 PREFCHARWIDTH 15;

    generateSeriesNumber 'Сгенерировать номер'(class o) = {
        number(o) <- curStringValue(numerator(o));
        series(o) <- series(numerator(o));
        incrementValueSession(numerator(o));
    }
    
    WHEN SETCHANGED(numerator(class o)) AND
         NOT CHANGED(number(o)) AND
         NOT CHANGED(series(o))
         DO generateSeriesNumber(o) ;
END

META defineNumeratedDefault(class, captionV, seriesV)
    @defineNumeratedDefault(class, captionV, seriesV, );
END

META defineNumeratedDefault(class, captionV, seriesV, prefix)
    @defineNumerated(class);
    @defineNumeratedDefaultPrefix(class, captionV, seriesV, prefix);
END

GROUP defaultNumerator 'Нумераторы по умолчанию' : public;

META defineNumeratedDefaultPrefix(class, captionV, seriesV, prefix)

    defaultNumerator##class = DATA Numerator ();
    nameDefaultNumerator##class captionV = name(defaultNumerator##class()) IN defaultNumerator;

    numerator(class o) <- defaultNumerator##class() WHEN SET(o IS class);

    EXTEND FORM defaultNumerators
        PROPERTIES() name##prefix##DefaultNumerator##class = nameDefaultNumerator##class
    ;
    
    loadDefaultNumerators() += {
        NEW n = Numerator {
            ASSIGN name(n) <- captionV;
            ASSIGN series(n) <- seriesV;
            ASSIGN minValue(n) <- 1L;
            ASSIGN maxValue(n) <- 99999L;
            ASSIGN stringLength(n) <- 5;

            ASSIGN defaultNumerator##class() <- n;
        }
    }

END

//------------------------------------------ Для двух объектов ---------------------------------------------//

META defineNumerated(object1, object2)

    number 'Номер' = DATA VARSTRING[28] (###object1, ###object2) MINCHARWIDTH 7;
    series 'Серия' = DATA STRING[2] (###object1, ###object2) FIXEDCHARWIDTH 3;
    seriesNumber 'Серия/Номер' (###object1 object1, ###object2 object2) = CONCAT '', series(object1, object2), number(object1, object2) MINCHARWIDTH 7 PREFCHARWIDTH 15 MAXCHARWIDTH 20 MATERIALIZED;

    numerator = DATA Numerator (###object1, ###object2);
    nameNumerator 'Нумератор' (###object1 object1, ###object2 object2) = name(numerator(object1, object2)) MINCHARWIDTH 7 PREFCHARWIDTH 15;

    setValueSessionNumerated 'Сгенерировать номер'(###object1 object1, ###object2 object2) = {
        ASSIGN number(object1, object2) <- curStringValue(numerator(object1, object2));
        ASSIGN series(object1, object2) <- series(numerator(object1, object2));
        EXEC incrementValueSession(numerator(object1, object2));
    } SHORTCUT number[###object1,###object2];

    WHEN CHANGED(numerator(###object1 object1, ###object2 object2)) AND
         NOT CHANGED(number(object1, object2)) AND
         NOT CHANGED(series(object1, object2))
         DO EXEC setValueSessionNumerated(object1, object2) ;

END

META defineNumeratedDefault (object1, object2, property, captionV, seriesV)

    defaultNumerator###object1###object2 = DATA Numerator ();
    nameDefaultNumerator###object1###object2 captionV = nameNumerator(defaultNumerator###object1###object2());

    EXTEND FORM defaultNumerators
        PROPERTIES() nameDefaultNumerator###object1###object2
    ;
    DESIGN defaultNumerators {
        defaultContainer {
            MOVE PROPERTY(nameDefaultNumerator###object1###object2);
        }
    }

    loadDefaultNumerators() += () {
        NEW n = Numerator {
            nameNumerator(n) <- captionV;
            seriesNumerator(n) <- seriesV;
            minValueNumerator(n) <- 1L;
            maxValueNumerator(n) <- 99999L;
            stringLengthNumerator(n) <- 5;

            defaultNumerator###object1###object2() <- n;
        }
    };

    numerator###object1###object2 (object1, object2) <- defaultNumerator###object1###object2 () WHEN SET(property(object1, object2));
END

META defineNumeratedID(object, caption, prefix)
    default##prefix##Numerator##object = DATA Numerator ();
    nameDefault##prefix##Numerator##object caption = name(default##prefix##Numerator##object()) IN defaultNumerator;
    WHEN SET(object o IS object) AND default##prefix##Numerator##object() AND NOT id(o) DO {
        id(o) <- CONCAT '', series(default##prefix##Numerator##object()), curStringValue(default##prefix##Numerator##object());  
        incrementValueSession(default##prefix##Numerator##object());
    } 
    
    EXTEND FORM defaultNumerators PROPERTIES() nameDefault##prefix##Numerator##object;
END

META defineNumeratedID(object, caption)
@defineNumeratedID(object, caption, );
END
// --------------------------------------------- Стандартные значения ---------------------------- //

loadDefaultNumerators 'Загрузить стандартные нумераторы' = ABSTRACT LIST ();
@implementLoadDefaultData(loadDefaultNumerators);
