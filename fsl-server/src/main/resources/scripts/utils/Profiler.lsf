MODULE Profiler;

REQUIRE Security, Utils, Profiling;

CLASS ProfileObject {
    top 'Базовое действие'
}

TABLE profileObject(ProfileObject); 
TABLE profileData(ProfileObject, ProfileObject, User, Form);

text 'Действие' = DATA TEXT (ProfileObject) IN recognize;
onStarted() += {
    text(ProfileObject po) <- staticCaption(ProfileObject.top) WHERE po == ProfileObject.top;
}
profileObject = GROUP AGGR ProfileObject profileObject BY text(profileObject) MATERIALIZED;

totalTime 'Суммарное время выполнения' = DATA LOCAL LONG (TEXT, TEXT, INTEGER, VARSTRING[100]);
totalSQLTime 'Суммарное время выполнения SQL' = DATA LOCAL LONG (TEXT, TEXT, INTEGER, VARSTRING[100]);  
totalUserInteractionTime 'Суммарное время ожидания действия пользователя' = DATA LOCAL LONG (TEXT, TEXT, INTEGER, VARSTRING[100]);
callCount 'Количество вызовов' = DATA LOCAL LONG (TEXT, TEXT, INTEGER, VARSTRING[100]);
minTime 'Минимальное время выполнения' = DATA LOCAL LONG (TEXT, TEXT, INTEGER, VARSTRING[100]);
maxTime 'Максимальное время выполнения' = DATA LOCAL LONG (TEXT, TEXT, INTEGER, VARSTRING[100]);
squaresSum 'Сумма квадратов времени выполнения' = DATA LOCAL DOUBLE (TEXT, TEXT, INTEGER, VARSTRING[100]);

totalTime 'Суммарное время выполнения' = DATA LONG (ProfileObject, ProfileObject, User, Form);
totalSQLTime 'Суммарное время выполнения SQL' = DATA LONG (ProfileObject, ProfileObject, User, Form);
totalUserInteractionTime 'Суммарное время ожидания действия пользователя' = DATA LONG (ProfileObject, ProfileObject, User, Form);
callCount 'Количество вызовов' = DATA LONG (ProfileObject, ProfileObject, User, Form);
minTime 'Минимальное время выполнения' = DATA LONG (ProfileObject, ProfileObject, User, Form);
maxTime 'Максимальное время выполнения' = DATA LONG (ProfileObject, ProfileObject, User, Form);
squaresSum 'Сумма квадратов времени выполнения' = DATA DOUBLE (ProfileObject, ProfileObject, User, Form);

isStartedProfiler 'Запущен'  = DATA BOOLEAN ();
isStoppedProfiler 'Остановлен' () = NOT isStartedProfiler();

onStarted() += { isStartedProfiler() <- NULL; }

doStartProfiler 'Запустить профилировщик' () = CUSTOM 'lsfusion.erp.utils.StartProfilerActionProperty';
startProfiler 'Запустить профилировщик' () = {
    totalTime(ProfileObject p1, ProfileObject p2, User u, Form f) <- NULL;
    totalSQLTime(ProfileObject p1, ProfileObject p2, User u, Form f) <- NULL; 
    totalUserInteractionTime(ProfileObject p1, ProfileObject p2, User u, Form f) <- NULL; 
    callCount(ProfileObject p1, ProfileObject p2, User u, Form f) <- NULL; 
    minTime(ProfileObject p1, ProfileObject p2, User u, Form f) <- NULL; 
    maxTime(ProfileObject p1, ProfileObject p2, User u, Form f) <- NULL; 
    squaresSum(ProfileObject p1, ProfileObject p2, User u, Form f) <- NULL; 
    
    isStartedProfiler() <- TRUE;
    apply();
    
    doStartProfiler();
}

doStopProfiler 'Остановить профилировщик' () = CUSTOM 'lsfusion.erp.utils.StopProfilerActionProperty';

stopProfiler 'Остановить профилировщик' () = {
    doStopProfiler();
    isStartedProfiler() <- NULL;
    APPLY;
}

id(User user) = INTEGER(user AS User) MATERIALIZED INDEXED; 

writeProfilerBatch () = {
    FOR [= GROUP SUM 1 IF callCount(TEXT t1, TEXT t2, INTEGER u, VARSTRING[100] f) BY t1](TEXT t1) AND NOT profileObject(t1) INLINE NEW p = ProfileObject DO {
        text(p) <- t1;    
    }     

    FOR [= GROUP SUM 1 IF callCount(TEXT t1, TEXT t2, INTEGER u, VARSTRING[100] f) BY t2](TEXT t2) AND NOT profileObject(t2) INLINE NEW p = ProfileObject DO {
        text(p) <- t2;    
    }     
    
    FOR ProfileObject p1 == profileObject(TEXT t1) AND ProfileObject p2 == profileObject(TEXT t2) AND callCount(t1, t2, INTEGER u, VARSTRING[100] f) 
            AND u == id(User user) AND (Form form == form(f) OR (f == '' AND form == Form.noForm)) INLINE DO {
        totalTime(p1, p2, user, form) <- totalTime(p1, p2, user, form) (+) totalTime(t1, t2, u, f); 
        totalSQLTime(p1, p2, user, form) <- totalSQLTime(p1, p2, user, form) (+) totalSQLTime(t1, t2, u, f); 
        totalUserInteractionTime(p1, p2, user, form) <- totalUserInteractionTime(p1, p2, user, form) (+) totalUserInteractionTime(t1, t2, u, f); 
        callCount(p1, p2, user, form) <- callCount(p1, p2, user, form) (+) callCount(t1, t2, u, f); 
        minTime(p1, p2, user, form) <- MIN minTime(p1, p2, user, form), minTime(t1, t2, u, f); 
        maxTime(p1, p2, user, form) <- MAX maxTime(p1, p2, user, form), maxTime(t1, t2, u, f); 
        squaresSum(p1, p2, user, form) <- squaresSum(p1, p2, user, form) (+) squaresSum(t1, t2, u, f);     
    }   
     
    apply();
}

//показатели
CLASS ProfilerIndex {
    callCount 'Количество вызовов',
    totalTime 'Суммарное время выполнения (с ожиданием)',
    totalTimeNoWait 'Суммарное время выполнения',
    totalJavaTime 'Суммарное время выполнения Java',
    totalSQLTime 'Суммарное время выполнения SQL',
    inherentTimeNoWait 'Внутреннее время выполнения',
    inherentJavaTime 'Внутреннее время выполнения Java',
    inherentSQLTime 'Внутреннее время выполнения SQL',
    totalUserInteractionTime 'Суммарное время ожидания действия пользователя',
    minTime 'Минимальное время выполнения',
    maxTime 'Максимальное время выполнения',
    averageTime 'Среднее время выполнения',
    averageSquaredTime 'Среднее квадратичное времени выполнения'
}

FORM profilerIndex 'Номенклатура'
    OBJECTS f=ProfilerIndex
    PROPERTIES(f) staticCaption READONLY
    LIST ProfilerIndex OBJECT f
;

DESIGN profilerIndex {
    PROPERTY (staticCaption(f)){caption = 'Наименование'; }
}

active 'Вкл.' = DATA LOCAL NESTED BOOLEAN (ProfilerIndex);
order  = DATA LOCAL NESTED ProfilerIndex ();
nameOrder 'Сортировка' = staticCaption(order());

value 'Значение показателя'(ProfileObject p1, ProfileObject p2, User u, Form f, ProfilerIndex pi) = CASE EXCLUSIVE 
    WHEN pi == ProfilerIndex.callCount THEN callCount(p1, p2, u, f)
    WHEN pi == ProfilerIndex.totalTime THEN NUMERIC[20,3](totalTime(p1, p2, u, f)) / 1000000
    WHEN pi == ProfilerIndex.totalSQLTime THEN NUMERIC[20,3](totalSQLTime(p1, p2, u, f)) / 1000000
    WHEN pi == ProfilerIndex.totalUserInteractionTime THEN NUMERIC[20,3](totalUserInteractionTime(p1, p2, u, f)) / 1000000
    WHEN pi == ProfilerIndex.minTime THEN NUMERIC[20,3](minTime(p1, p2, u, f)) / 1000000
    WHEN pi == ProfilerIndex.maxTime THEN NUMERIC[20,3](maxTime(p1, p2, u, f)) / 1000000
    WHEN pi == ProfilerIndex.averageTime THEN NUMERIC[20,3](totalTime(p1, p2, u, f)) / callCount(p1, p2, u, f) / 1000000
    WHEN pi == ProfilerIndex.averageSquaredTime THEN NUMERIC[20,3](sqrt(squaresSum(p1, p2, u, f) / callCount(p1, p2, u, f)) / 1000000)
    WHEN pi == ProfilerIndex.totalTimeNoWait THEN NUMERIC[20,3](totalTime(p1, p2, u, f) (-) totalUserInteractionTime(p1, p2, u, f)) / 1000000
    WHEN pi == ProfilerIndex.totalJavaTime THEN NUMERIC[20,3](totalTime(p1, p2, u, f) (-) totalUserInteractionTime(p1, p2, u, f) (-) totalSQLTime(p1, p2, u, f)) / 1000000;
    
order 'Порядок'(ProfileObject p1, ProfileObject p2, User u, Form f) = value(p1, p2, u, f, order());

dataInFilter 'Отм' = DATA LOCAL NESTED BOOLEAN (User);
inFilter 'Отм' = DATA LOCAL NESTED BOOLEAN (UserRole);
overFilter 'Отм' = OVERRIDE dataInFilter(User u), inFilter(mainRole(u)), [=GROUP SUM 1 IF in(User u, UserRole r) AND inFilter(r) BY u](u) > 0;
inFilter 'Отм' (User u) = OVERRIDE overFilter(u), NOT [=GROUP SUM 1 IF overFilter(User u)]() AND u IS User;
background(User u) = IF inFilter(u) THEN RGB(220,220,220);

dataFilter 'Отм' = DATA LOCAL NESTED BOOLEAN (Form);
countDataFilterForm = GROUP SUM 1 IF dataFilter(Form f);
inFilter 'Отм' (Form f) = OVERRIDE dataFilter(f), f IS Form AND NOT countDataFilterForm();
background(Form u) = IF inFilter(u) THEN RGB(220,220,220);

inFilter 'Отм' (User u, Form f) = inFilter(u) AND inFilter(f);

link 'Количество вызовов' = GROUP SUM callCount(ProfileObject down, ProfileObject up, User u, Form f) IF inFilter(u, f) BY up, down;

value 'Вызов' (ProfileObject up, ProfileObject down, ProfilerIndex pi) = CASE WHEN pi != ProfilerIndex.minTime AND pi != ProfilerIndex.maxTime AND pi != ProfilerIndex.averageTime AND pi != ProfilerIndex.averageSquaredTime  
    THEN [=GROUP SUM value(ProfileObject down, ProfileObject up, User u, Form f, ProfilerIndex pi) IF inFilter(u, f) BY up, down, pi](up, down, pi);
order 'Порядок'(ProfileObject p1, ProfileObject p2) = value(p1, p2, order());

downValue 'Общее' = GROUP SUM value(ProfileObject up, ProfileObject down, ProfilerIndex pi) BY down, pi;
upValue 'Вызванных' = GROUP SUM value(ProfileObject up, ProfileObject down, ProfilerIndex pi) BY up, pi;
value 'Значение показателя' (ProfileObject po, ProfilerIndex pi) = CASE 
    WHEN pi == ProfilerIndex.callCount OR pi == ProfilerIndex.totalTime OR pi == ProfilerIndex.totalSQLTime OR pi == ProfilerIndex.totalUserInteractionTime OR pi == ProfilerIndex.totalTimeNoWait OR pi == ProfilerIndex.totalJavaTime 
        THEN downValue(po, pi)
    WHEN pi == ProfilerIndex.inherentTimeNoWait THEN downValue(po, ProfilerIndex.totalTimeNoWait) (-) upValue(po, ProfilerIndex.totalTimeNoWait)
    WHEN pi == ProfilerIndex.inherentSQLTime THEN downValue(po, ProfilerIndex.totalSQLTime) (-) upValue(po, ProfilerIndex.totalSQLTime)
    WHEN pi == ProfilerIndex.inherentJavaTime THEN downValue(po, ProfilerIndex.totalJavaTime) (-) upValue(po, ProfilerIndex.totalJavaTime);
order 'Порядок' (ProfileObject po) = value(po, order());

//из-за того что не работают группы в колонки
callCount(ProfileObject po) = value(po, ProfilerIndex.callCount);
totalTime(ProfileObject po) = value(po,ProfilerIndex.totalTime);
totalUserInteractionTime(ProfileObject po) = value(po,ProfilerIndex.totalUserInteractionTime);
totalSQLTime(ProfileObject po) = value(po,ProfilerIndex.totalSQLTime);
totalTimeNoWait(ProfileObject po) = value(po,ProfilerIndex.totalTimeNoWait);
totalJavaTime(ProfileObject po) = value(po,ProfilerIndex.totalJavaTime);
inherentSQLTime(ProfileObject po) = value(po,ProfilerIndex.inherentSQLTime);
inherentTimeNoWait(ProfileObject po) = value(po,ProfilerIndex.inherentTimeNoWait);
inherentJavaTime(ProfileObject po) = value(po,ProfilerIndex.inherentJavaTime);


isCallCount() = active(ProfilerIndex.callCount);
isTotalTime() = active(ProfilerIndex.totalTime);
isTotalSQLTime() = active(ProfilerIndex.totalSQLTime);
isTotalUserInteractionTime() = active(ProfilerIndex.totalUserInteractionTime);
isInherentTimeNoWait() = active(ProfilerIndex.inherentTimeNoWait);
isInherentSQLTime() = active(ProfilerIndex.inherentSQLTime);
isInherentJavaTime() = active(ProfilerIndex.inherentJavaTime);
isTotalTimeNoWait() = active(ProfilerIndex.totalTimeNoWait);
isTotalJavaTime() = active(ProfilerIndex.totalJavaTime);

//по пользователям, формам
downValue 'Общее' = GROUP SUM value(ProfileObject down, ProfileObject up, User u, Form f, ProfilerIndex pi) BY down, u, f, pi;
upValue 'Вызванных' = GROUP SUM value(ProfileObject down, ProfileObject up, User u, Form f, ProfilerIndex pi) BY up, u, f, pi;
value 'Внутреннее' (ProfileObject po, User u, Form f, ProfilerIndex pi) = downValue(po, u, f, pi) (-) upValue(po, u, f, pi);
order 'Порядок' (ProfileObject po, User u, Form f) = value(po, u, f, order());

//интерфейс
dataSelectedTop = DATA LOCAL ProfileObject();
selectedTop = OVERRIDE dataSelectedTop(), ProfileObject.top;
nameSelectedTop 'Действие' = VARSTRING[1000](text(selectedTop()));

pathTo(ProfileObject a, ProfileObject b) = RECURSION a AS ProfileObject == b STEP TRUE IF link($b, b) CYCLES YES; // из a можно дойти в b
pathFrom(ProfileObject a, ProfileObject b) = RECURSION a AS ProfileObject == b STEP TRUE IF link(b, $b) CYCLES YES; // из a можно дойти в b

parent(ProfileObject down) = IF NOT down == selectedTop() THEN 
        OVERRIDE [=GROUP LAST ProfileObject up IF link(up, ProfileObject down) AND pathTo(selectedTop(), up) BY down ORDER order(up, down)](down), 
            ProfileObject.top IF down IS ProfileObject;
        
child(ProfileObject up) = IF NOT up == selectedTop() THEN 
        OVERRIDE [=GROUP LAST ProfileObject down IF link(ProfileObject up, down) AND pathFrom(selectedTop(), down) BY up ORDER order(up, down)](up),
            ProfileObject.top IF up IS ProfileObject;
       
initFilters() = {
    order() <- ProfilerIndex.totalTimeNoWait;
    active(ProfilerIndex i) <- TRUE WHERE i == ProfilerIndex.totalTimeNoWait OR i == ProfilerIndex.totalSQLTime OR i == ProfilerIndex.inherentJavaTime OR i == ProfilerIndex.callCount;
}
        
EXTEND FORM profiler
    PROPERTIES() startProfiler SHOWIF isStoppedProfiler(), stopProfiler SHOWIF isStartedProfiler(), nameOrder
  
//настройки
    OBJECTS pi = ProfilerIndex
    PROPERTIES (pi) active, staticCaption READONLY

    OBJECTS r = UserRole
    PROPERTIES (r) inFilter
    PROPERTIES (r) READONLY name
    
    OBJECTS u = User
    PROPERTIES (u) BACKGROUND background(u) overFilter, name READONLY  , nameMainRole READONLY  
    
    OBJECTS f = Form
    PROPERTIES (f)  BACKGROUND background(f) dataFilter, canonicalName READONLY

//список
    OBJECTS ihs = ProfilerIndex GRID
    FILTERS active(ihs)

    OBJECTS ohs = ProfileObject
    PROPERTIES READONLY text(ohs), order(ohs), value(ohs, ihs) COLUMNS (ihs) HEADER staticCaption(ihs)
    ORDER order(ohs) DESC
    FILTERS order(ohs)

//raw data
    OBJECTS i = ProfilerIndex GRID
    FILTERS active(i)
    
    OBJECTS g = (po1 = ProfileObject, po2 = ProfileObject, user = User, form = Form)
    PROPERTIES(po2) READONLY text
    PROPERTIES(po1) READONLY text 
    PROPERTIES(user) READONLY name
    PROPERTIES(form) READONLY canonicalName
    PROPERTIES(po1, po2, user, form) READONLY order
    PROPERTIES(po1, po2, user, form, i) READONLY value COLUMNS (i) HEADER staticCaption(i)
    ORDER order(po1, po2, user, form) DESC 
    FILTERS order(po1, po2, user, form)

//дерево
    PROPERTIES nameSelectedTop() 
    
    TREE pT down=ProfileObject PARENT parent
    PROPERTIES (down) READONLY text, order, totalTimeNoWait SHOWIF isTotalTimeNoWait(), totalJavaTime SHOWIF isTotalJavaTime(), 
                        totalSQLTime SHOWIF isTotalSQLTime(), inherentTimeNoWait SHOWIF isInherentTimeNoWait(), inherentJavaTime SHOWIF isInherentJavaTime()
    ORDER order(down) DESC
    
    OBJECTS iupToDown = ProfilerIndex GRID
    FILTERS active(iupToDown)
    
    OBJECTS upToDown=ProfileObject
    PROPERTIES (upToDown) READONLY text
    PROPERTIES (down, upToDown) READONLY order
    PROPERTIES (down, upToDown, iupToDown) READONLY value COLUMNS (iupToDown) HEADER staticCaption(iupToDown)
    ORDER order(down, upToDown) DESC
    FILTERS order(down, upToDown)
    FILTERGROUP  upToDown
        FILTER 'Дополнительные' parent(upToDown) != down 'F6'
    
    OBJECTS idownWithUsers = ProfilerIndex GRID
    FILTERS active(idownWithUsers)    
    
    OBJECTS downWithUsers = (downWD = ProfileObject, uWD = User, fWD = Form)
    PROPERTIES READONLY text(downWD), name(uWD), canonicalName(fWD)
    PROPERTIES (downWD, uWD, fWD) READONLY order
    PROPERTIES (downWD, uWD, fWD, idownWithUsers) READONLY value
    FILTERS downWD == down, order(downWD, uWD, fWD)
    
   
    
    TREE pB up=ProfileObject PARENT child
    PROPERTIES (up) READONLY text, order, totalTimeNoWait SHOWIF isTotalTimeNoWait(), totalJavaTime SHOWIF isTotalJavaTime(), 
                             totalSQLTime SHOWIF isTotalSQLTime(), inherentTimeNoWait SHOWIF isInherentTimeNoWait(), inherentJavaTime SHOWIF isInherentJavaTime()
    ORDER order(up) DESC
    
    OBJECTS idownToUp = ProfilerIndex GRID
    FILTERS active(iupToDown)
    
    OBJECTS downToUp=ProfileObject
    PROPERTIES (downToUp) READONLY text
    PROPERTIES (downToUp, up) READONLY order
    PROPERTIES (downToUp, up, iupToDown) READONLY value COLUMNS (idownToUp) HEADER staticCaption(idownToUp)
    ORDER order(downToUp, up) DESC
    FILTERS order(downToUp, up)
    FILTERGROUP  downToUp
        FILTER 'Дополнительные' child(downToUp) != up 'F6'
    
    EVENTS 
        ON INIT initFilters()
;

DESIGN profiler {
    PROPERTY (text(po2)) {
        caption = 'Верхнее действие';
    }
    
    tab {
        NEW first {
            caption = 'Настройки';
            MOVE PROPERTY (startProfiler());
            MOVE PROPERTY (stopProfiler());
            MOVE PROPERTY (nameOrder());
            MOVE BOX(pi){fill = 1;};
            NEW options {
                fill = 2;
                type = SPLITH;
                NEW user {
                    fill = 1;
                    MOVE BOX(r);
                    MOVE BOX(u);        
                }
                MOVE BOX(f){fill = 1;};
            }
        }
        NEW hotSpots {
            caption = 'Список вызовов';
            MOVE BOX(ohs);
        }
        NEW call {
            caption = 'Дерево вызовов';
            MOVE PROPERTY (nameSelectedTop());
            NEW split {
                type = SPLITH;
                fill = 1;
                NEW pT{
                    type = SPLITV;
                    fill = 1;
                    MOVE BOX(TREE pT){fill = 2;};
                    NEW tabDownUsers{
                        type = TABBED;
                        fill = 1;
                        MOVE BOX(upToDown) {caption = 'Все вызовы';};
                        MOVE BOX(downWithUsers) {caption = 'По пользователям';};
                    }
                }
                NEW pB {
                    type = SPLITV;
                    fill = 1;
                    MOVE BOX(TREE pB){fill = 2;};
                    MOVE BOX(downToUp){fill = 1;};
                }
            }
        }
        NEW raw {
            caption = 'Raw data';
            MOVE BOX(g);
        }
    }
    MOVE TOOLBARBOX;
}

setSelected 'Посмотреть дерево вызовов'(ProfileObject po) = {
    dataSelectedTop() <- po;
    ACTIVATE TAB profiler.call;
} ASON CONTEXTMENU text[ProfileObject];

NAVIGATOR {
    systemEvents {
        ADD profiler;
    }
}
