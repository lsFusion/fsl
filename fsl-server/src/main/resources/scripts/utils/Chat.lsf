MODULE Chat;

REQUIRE Authentication, Integration, Time, SystemEvents, Utils;

CLASS Chat 'Чат';
TABLE chat(Chat);
TABLE chatCustomUser(Chat, CustomUser);

EXTEND CLASS UserRole : Chat;

@defineExternalizable(chat, VARSTRING[100]);

in 'Вкл.' = DATA BOOLEAN (Chat, CustomUser);
overIn 'Вкл.' (Chat c, CustomUser u) = IF c IS UserRole THEN has(u,c) ELSE in(c,u);  
in (Chat c) = overIn(c, currentUser()); 
isDialog(Chat chat) = [=GROUP SUM 1 IF in(chat, CustomUser user) BY chat](chat) == 2;
chatIn(user1, user2) = GROUP MAX Chat chat IF in(chat, CustomUser user1) AND in(chat, CustomUser user2) AND isDialog(chat) BY user1, user2;
readonly 'Только чтение' = DATA BOOLEAN (Chat, CustomUser);
readonly 'Только чтение' (Chat c) = readonly(c, currentUser());

dataName 'Имя' = DATA VARISTRING[100] (Chat);
nameOrLogin 'Пользователь' (CustomUser user) = OVERRIDE name(user), login(user);
name 'Имя' (Chat chat) = (OVERRIDE dataName(chat), IF chat IS UserRole THEN 'Роль: ' + Security.name(chat) ELSE [=GROUP CONCAT nameOrLogin(CustomUser user), ', ' IF in(chat, user) AND (NOT isDialog(chat) OR NOT user == currentUser()) BY chat](chat)) MINCHARWIDTH 15 PREFCHARWIDTH 30;

CLASS MessageStatus {
    sent 'Отправлено',
    delivered 'Доставлено',
    seen 'Прочитано'
}

CLASS Message 'Сообщение';
TABLE message(Message);
TABLE messageCustomUser(Message, CustomUser);

pushNotification 'Отправить уведомление пользователю' = ABSTRACT LIST (CustomUser, BOOLEAN, BOOLEAN);
seekLastMessageInFullChat = ABSTRACT LIST ();
markSeenOnChange = ABSTRACT LIST (Chat);
editMessage 'Редактировать сообщение' (Chat c, Message m) = ABSTRACT LIST (Chat, Message);

author 'Автор' = DATA CustomUser (Message);
nameAuthor 'Автор' (Message m) = nameOrLogin(author(m)) MAXCHARWIDTH 30 PREFCHARWIDTH 30;
own(Message m) = author(m) == currentUser();
text 'Текст' = DATA TEXT (Message) MINCHARWIDTH 50;
dateTime 'Время' = DATA DATETIME (Message) MAXCHARWIDTH 30 PREFCHARWIDTH 30;
lastEditDateTime 'Время редактирования' = DATA DATETIME (Message) MAXCHARWIDTH 30 PREFCHARWIDTH 30;
system 'Системное' = DATA BOOLEAN (Message);
status 'Статус' = DATA MessageStatus (Message, CustomUser);
captionStatus 'Статус' (Message message, CustomUser user) = staticCaption(status(message, user));
captionStatus 'Статус' (Message message) = captionStatus(message, currentUser());
chat = DATA Chat (Message);
nameChat 'Чат' (Message message) = name(chat(message)) MINCHARWIDTH 30 PREFCHARWIDTH 30;
nameShortChat 'Чат' (Message message) = IF isDialog(chat(message)) THEN nameChat(message) ELSE (nameChat(message) + ' [' + nameAuthor(message) + ']') MINCHARWIDTH 15 PREFCHARWIDTH 30;

attachment 'Вложение' = DATA CUSTOMFILE (Message);
hasAttachment 'Вл.' (Message m) = IF attachment(m) THEN TRUE MAXCHARWIDTH 1 PREFCHARWIDTH 1;
loadAttachment 'Прикрепить вложение' (Message m) = { INPUT =attachment(m) CHANGE; }
openAttachment 'Открыть вложение' (Message m) = {
    IF attachment(m) THEN {
        OPEN attachment(m);
    } ELSE {
        MESSAGE 'Вложение отсутствует!';
    }
} IMAGE 'open.png';

editedText (Message m) = 'Изменено: ' + TEXT(lastEditDateTime(m));
showText 'Текст' (Message m) = (IF text(m) THEN text(m) ELSE '') + (IF lastEditDateTime(m) THEN '\n\n' + editedText(m) ELSE '');

readonly (Message m) = readonly(chat(m));
editable (Message m) = NOT readonly(m);

seenCount(Message m) = GROUP SUM 1 IF status(m, CustomUser user) == MessageStatus.seen BY m;
deliveredCount(Message m) = GROUP SUM 1 IF status(m, CustomUser user) == MessageStatus.delivered BY m;
status 'Статус' (Message m) = IF own(m) THEN ISTRING[10](staticCaption(IF seenCount(m) > 1 THEN MessageStatus.seen ELSE IF deliveredCount(m) > 0 THEN MessageStatus.delivered ELSE MessageStatus.sent)) ELSE '' MAXCHARWIDTH 10 PREFCHARWIDTH 10;
 
countMessages 'Кол-во сообщений' (chat) = GROUP SUM 1 IF text(Message message) AND chat(message) == Chat chat BY chat;
isEmpty(Chat c) = NOT countMessages(c); 
lastMessageDateTime 'Последнее сообщение' (Chat c) = GROUP LAST dateTime(Message m) BY chat(m) ORDER dateTime(m), m;
lastMessageDateTime 'Последнее сообщение' (CustomUser u) = lastMessageDateTime(chatIn(u, currentUser()));

unreadMessages 'Непрочитанных' (chat, user) = GROUP SUM 1 IF (status(Message message, CustomUser user) == MessageStatus.sent OR status(message, user) == MessageStatus.delivered) AND (author(message) != user) BY chat(message), user;
unreadMessages'Непрочитанных' (Chat chat) = unreadMessages(chat, currentUser()) MAXCHARWIDTH 10 PREFCHARWIDTH 10;
unreadMessages 'Непрочитанных' (CustomUser user) = unreadMessages(chatIn(user, currentUser()), currentUser()) MAXCHARWIDTH 10 PREFCHARWIDTH 10;
sumUnreadMessages 'Всего непрочитанных' (CustomUser user) = GROUP SUM unreadMessages(Chat chat, CustomUser user) IF overIn(chat, user) BY user;

chatNotFound = DATA LOCAL BOOLEAN ();
defaultNewMessage 'Новое сообщение' = DATA LOCAL NESTED TEXT ();
chatNewMessage 'Новое сообщение' = DATA LOCAL NESTED TEXT (Chat);
newMessage 'Новое сообщение' = DATA LOCAL TEXT (Chat);
editingMessage 'Редактируемое сообщение' = DATA LOCAL Message(Chat);
noEditingMessage (Chat chat) = NOT editingMessage(chat);
notificate 'С уведомлением' = DATA LOCAL NESTED BOOLEAN (Chat);

attachment 'Вложение' = DATA LOCAL NESTED CUSTOMFILE (Chat);
loadAttachment 'Прикрепить вложение' (Chat c) = { INPUT =attachment(c) CHANGE; }
deleteAttachment 'Удалить вложение' (Chat c) = { attachment(c) <- NULL; } IMAGE 'deleteChat.png';
showLoadAttachment (Chat c) = NOT attachment(c);
showDeleteAttachment (Chat c) = attachment(c);

onStarted() += {

    FOR NOT chat('system') NEW c = Chat DO {
        id(c) <- 'system';
        dataName(c) <- 'Все'; 
    }
    
    in(Chat c, User u) <- TRUE WHERE (login( u) AND lastActivity(u)) AND  c == chat('system');

    status(Message m, CustomUser u) <- MessageStatus.seen WHERE system(m);

}

setSeenMessageUser(Message m, CustomUser user, BOOLEAN system) = {
    status(m, user) <- IF system THEN MessageStatus.sent ELSE MessageStatus.seen;
}

markSeenOnChangeMessages (Chat chat, CustomUser user) = {
    LOCAL needApply = BOOLEAN();
    FOR in(chat) AND chat(Message m) == chat AND (status(m, user) == MessageStatus.sent OR status(m, user) == MessageStatus.delivered) DO {
        status(m, user) <- MessageStatus.seen;
        needApply() <- TRUE;
    }
    IF needApply() THEN {
        apply();
    }
};

editMessageText (Message m, Chat c) = {
    lastEditDateTime(m) <- currentDateTime();
    text(m) <- newMessage(c);
    attachment(m) <- attachment(c);
}

stopEditing(Chat c) = {
    IF editingMessage(c) THEN {
    editingMessage(c) <- NULL;
    chatNewMessage(c) <- NULL;
    newMessage(c) <- NULL;
    attachment(c) <- NULL;
    }
}

sendMessage 'Написать в чат' (Chat chat, TEXT message, BOOLEAN system) = {
    NEW m = Message {
        chat(m) <- chat;
        dateTime(m) <- currentDateTime();
        author(m) <- currentUser();
        system(m) <- system;
        text(m) <- message;
        attachment(m) <- attachment(chat);
        attachment(chat) <- NULL;
        IF chatNotFound() THEN
            defaultNewMessage() <- NULL;
        ELSE
            chatNewMessage(chat) <- NULL; 
        
        setSeenMessageUser(m, currentUser(), system);
        FOR overIn(chat, CustomUser user) AND user != currentUser() DO {
            status(m, user) <- MessageStatus.sent;
        }            
    }
    apply();
    
    NEWSESSION NEWTHREAD {
        FOR overIn(chat, CustomUser user) AND (user != currentUser() OR system) DO {
            pushNotification(user, system, notificate(chat));
        }          
    }
    
    IF NOT system THEN
        markSeenOnChangeMessages(chat, currentUser());
    seekLastMessageInFullChat();
}

sendMessage 'Отправить' = ABSTRACT LIST (Chat, CustomUser) EDITKEY 'ctrl ENTER';
saveMessage 'Сохранить' = ABSTRACT LIST (Chat) EDITKEY 'ctrl ENTER';

sendRestartMessage 'Отправить сообщение об остановке сервера' = DATA BOOLEAN ();
sendRestartServerMessage 'Отправить сообщение об остановке сервера' () = { sendMessage(chat('system'), 'Сервер будет остановлен через 5 минут!\nСохраните текущую работу и выйдите из приложения.', TRUE); }
restartServer() += { IF sendRestartMessage() THEN sendRestartServerMessage(); }

sendCancelRestartServerMessage 'Отправить сообщение об отмене остановки сервера' () = { sendMessage(chat('system'), 'Остановка сервера отменена', TRUE); }
cancelRestartServer() += { IF sendRestartMessage() THEN sendCancelRestartServerMessage(); }

EXTEND FORM admin PROPERTIES() sendRestartMessage;

DESIGN admin {
    administration {
        MOVE PROPERTY(sendRestartMessage()) BEFORE PROPERTY(restartServer());
    }
}                               

seekChat = ABSTRACT(CustomUser);
  
saveNewMessage(Chat c) = {
    INPUT t=TEXT DO {
        IF t THEN {
            newMessage(c) <- t;
            IF chatNotFound() THEN
                defaultNewMessage() <- newMessage(c);
            ELSE 
                chatNewMessage(c) <- newMessage(c);
        }
    }    
}  
  
includeUserInChat (CustomUser u, Chat c) = {
    in(c, u) <- TRUE;
}    
  
includeCurrentUserInChat (Chat c) = {
    includeUserInChat(currentUser(), c);
}
 
FORM addChat 'Создать чат'
    OBJECTS c = Chat PANEL
    PROPERTIES (c) name
    
    OBJECTS u = CustomUser
    PROPERTIES(u) READONLY login, name
    PROPERTIES(c,u) TODRAW u in, readonly 
    
    FILTERGROUP in FILTER 'Включены в чат' in(c,u)          

    EVENTS ON CHANGE c includeCurrentUserInChat(c)

    EDIT Chat OBJECT c
;  
  
FORM editChat 'Чат'
    OBJECTS c = Chat PANEL
    PROPERTIES (c) name
    
    OBJECTS u = CustomUser
    PROPERTIES(u) READONLY login, name
    PROPERTIES(c,u) TODRAW u in, readonly 
    
    FILTERGROUP in FILTER 'Включены в чат' in(c,u) DEFAULT
;  

editChatAction 'Редактировать' (Chat c) = {
    IF c IS UserRole THEN 
        MESSAGE 'Запрещено редактировать чат для роли!';
    ELSE
        SHOW editChat ;
}

//----------------------------FULL CHAT----------------------------//

recentVisible  = ABSTRACT BOOLEAN ();
readonlyFullChat(Chat chat) = readonly(chat) AND recentVisible();
prevUser() = DATA LOCAL NESTED CustomUser();

backgroundUnread 'Цвет' (Chat chat) = RGB(255, 0, 0) IF unreadMessages(chat);
backgroundUnread 'Цвет' (CustomUser user) = RGB(255, 0, 0) IF unreadMessages(user);

online (CustomUser user) = subtractSeconds(lastActivity(user), currentDateTime()) < 300;
away (CustomUser user) = subtractSeconds(lastActivity(user), currentDateTime()) < 3600;

backgroundUser (CustomUser user) = IF online(user) THEN RGB(0, 255, 0) ELSE IF away(user) THEN RGB(255, 255, 0);

backgroundMessage (Message m) = IF NOT own(m) THEN RGB(255, 255, 255) ELSE IF seenCount(m) < 2 THEN RGB(247, 247, 247) ELSE RGB(240, 244, 248);

markSeenMessages (CustomUser user) = {
    FOR in(chat(Message m)) AND status(m, user) == MessageStatus.delivered DO {
        status(m, user) <- MessageStatus.seen;
    }
};

markSeenOnChange(Chat c) += {
    markSeenOnChangeMessages(c, currentUser());
    seekLastMessageInFullChat();
};

markSeenOnChange(Message m) = { 
    markSeenOnChangeMessages(chat(m), currentUser());
};

deleteMessage 'Удалить сообщение' (Message m) = {
    IF own(m) THEN {
        IF subtractSeconds(dateTime(m), currentDateTime()) < 3600 THEN {
            DELETE m;
            apply();
        } ELSE MESSAGE 'Запрещено удалять сообщения старше часа!';
    } ELSE MESSAGE 'Запрещено удалять чужие сообщения!';
}

FORM fullChat 'Чат'
    OBJECTS c = Chat
    PROPERTIES(c) READONLY name ON SHORTCUT editChatAction(c), lastMessageDateTime, unreadMessages BACKGROUND backgroundUnread(c)
    PROPERTIES(c) NEWSESSION NEW, DELETE SHOWIF isEmpty(c)
    PROPERTIES(c) READONLYIF readonlyFullChat(c) PANEL newMessage ON CHANGE saveNewMessage(c), notificate, 
                  loadAttachment SHOWIF showLoadAttachment(c), deleteAttachment SHOWIF showDeleteAttachment(c)
    
    EVENTS ON INIT markSeenOnChange(c)
    EVENTS ON CHANGE c markSeenOnChange(c), ON CHANGE c stopEditing(c)
    EVENTS ON CLOSE markSeenOnChange(c)
    ORDER BY lastMessageDateTime(c) DESC
    
    OBJECTS u = CustomUser
    PROPERTIES(u) READONLY BACKGROUND backgroundUser(u) login, name, lastMessageDateTime , unreadMessages BACKGROUND backgroundUnread(u) 
    
    EVENTS ON INIT seekChat(u)
    EVENTS ON CHANGE u seekChat(u)
    
    FILTERGROUP in FILTER 'Только активные' away(u)  
    FILTERS u != currentUser(), login(u), lastActivity(u)
    ORDER BY lastMessageDateTime(u) DESC
    
    PROPERTIES(c, u)  sendMessage SHOWIF noEditingMessage(c)
    PROPERTIES(c)  saveMessage SHOWIF editingMessage(c)
    
    OBJECTS m = Message LAST
    PROPERTIES(m) READONLY BACKGROUND backgroundMessage(m) nameAuthor, showText ON SHORTCUT editMessage(c, m) ON SHORTCUT deleteMessage(m) 
                  ON SHORTCUT openAttachment(m), hasAttachment, status, dateTime, openAttachment SHOWIF attachment(m) TOOLBAR EDITABLE
    
    EVENTS ON CHANGE m markSeenOnChange(m), ON CHANGE m stopEditing(c)
        
    FILTERS in(c), chat(m) == c AND (NOT chatNotFound() OR recentVisible()), status(m, currentUser())
    
    LIST Chat OBJECT c
;

DESIGN fullChat {
    BOX {
        NEW topMain {
            type = SPLITH;
            fill = 1;
            NEW left {
                fill = 0.3;
                type = TABBED;
       
                NEW contacts {
                    caption = 'Контакты';
                    MOVE BOX(u) { caption = 'Контакты'; }
                }
                NEW recent {
                    caption = 'Чаты';
                    MOVE BOX(c) { caption = 'Чаты'; } 
                }                         
                
            }
            NEW right {
                type = SPLITV;
                fill = 0.7;
                MOVE BOX(m) { 
                    fill = 0.8; 
                    PROPERTY(showText(m)) {
                        minimumValueWidth = 300;
                    }                       
                }
                            
                NEW bottom {   
                    fill = 0.2; 
                    type = CONTAINERV;
                    MOVE PROPERTY(newMessage(c)) {
                        fill = 1; 
                        panelCaptionAbove = TRUE;
                    }   
                                                  
                    NEW bottomSend {
                        align = STRETCH ;
                        type = CONTAINERH;
                        MOVE PROPERTY(sendMessage(c, u)) {                           
                            font = 'bold 24';
                        }
                        MOVE PROPERTY(saveMessage(c)) {                           
                            font = 'bold 24';
                        }
                        NEW loadAttachment {
                            fill = 1;
                            MOVE PROPERTY(loadAttachment(c)) {
                            }
                        }
                        NEW deleteAttachment {
                            fill = 1;
                            MOVE PROPERTY(deleteAttachment(c)) {
                            }
                        }
                        NEW notificate {
                            fill = 1;
                            MOVE PROPERTY(notificate(c)) {
                                font = 'bold 24';
                                alignment = TRAILING;
                            }
                        }
                    }
                }
            }            
        }
        MOVE TOOLBARBOX;
    }           
}

editMessage (Chat c, Message m) += {
    IF own(m) THEN {
        IF subtractSeconds(dateTime(m), currentDateTime()) < 3600 THEN {
            newMessage(c) <- text(m);
            editingMessage(c) <- m;
            attachment(c) <- attachment(m);
            ACTIVATE PROPERTY fullChat.newMessage(c);
        } ELSE MESSAGE 'Запрещено редактировать сообщения старше часа!';
    } ELSE MESSAGE 'Запрещено редактировать чужие сообщения!';
}

sendMessage 'Написать в чат' (Chat chat) = {
    IF newMessage(chat) OR attachment(chat) THEN
        sendMessage(chat, newMessage(chat), NULL);
}

sendMessage 'Написать пользователю' (CustomUser user) = {
    LOCAL chat = Chat();
    chat() <- chatIn(user, currentUser());
    IF NOT chat() THEN {
        NEW chat = Chat {
            in(chat, user) <- TRUE;
            in(chat, currentUser) <- TRUE WHERE currentUser == currentUser();
            newMessage(chat) <- defaultNewMessage();
            sendMessage(chat);
            SEEK fullChat.c = chat;
        } 
    } ELSE sendMessage(chat());
}

saveMessage(Chat c) += {
    IF editingMessage(c) THEN {
        editMessageText(editingMessage(c), c);
        chatNewMessage(c) <- NULL;
        attachment(c) <- NULL;
        apply();
    }
} 

//----------------------------SHORT CHAT----------------------------//

deliveredNotificationAction(CustomUser user) += {
    FOR in(chat(Message m)) AND status(m, user) == MessageStatus.sent DO {
        status(m, user) <- MessageStatus.delivered;
    }
}

closeChat 'Закрыть' = { 
    markSeenMessages(currentUser());
    apply(); 
    formClose();
}

reply 'Ответ' = DATA LOCAL TEXT (Message);
notificate 'С уведомлением' = DATA LOCAL BOOLEAN (Message); 
replyChat 'Ответить' (Chat c, Message m) = {
    IF(reply(m)) THEN {
        markSeenMessages(currentUser());
        newMessage(c) <- reply(m);
        notificate(c) <- notificate(m);
        sendMessage(chat(m));
        formClose();
    }
};

replyChat 'Ответить' (Message m) = { 
    replyChat(chat(m), m);
} EDITKEY 'ctrl ENTER';

openChat 'Перейти в чат' (Chat c, Message m) = {
    markSeenMessages(currentUser());
    SHOW fullChat NOWAIT;
    NEWSESSION { NEWTHREAD {
        ACTIVATE TAB fullChat.recent;
        SEEK fullChat.c = chat(m);
        SEEK LAST fullChat.m;
        newMessage(c) <-reply(m);
    } CONNECTION currentConnection(); }
    APPLY NESTED (newMessage[Chat], reply[Message]);
    formClose();
};

openChat 'Перейти в чат' (Message m) = {
    openChat(chat(m), m);
};

FORM shortChat 'Новое сообщение'
OBJECTS m = Message LAST
PROPERTIES(m) READONLY nameShortChat, showText, dateTime
PROPERTIES(m) PANEL reply READONLYIF readonly(m), replyChat SHOWIF editable(m), notificate SHOWIF editable(m), openChat
PROPERTIES() closeChat
FILTERS in(chat(m)), status(m, currentUser()), status(m, currentUser()) != MessageStatus.seen
EVENTS ON CLOSE markSeenOnChange(m)
;

DESIGN shortChat {
    BOX {
        BOX(m) {
            fill = 0.7;
        }
        MOVE PROPERTY(reply(m)) {
            panelCaptionAbove = TRUE;   
            fill = 0.3;
        }
        NEW buttons {
            align = STRETCH;
            type = CONTAINERH;
            MOVE PROPERTY(replyChat(m));
            MOVE PROPERTY(openChat(m));
            MOVE PROPERTY(closeChat());
            NEW notificate {
                fill = 1;
                MOVE PROPERTY(notificate(m)) { alignment = TRAILING; };
            }
        }
        REMOVE TOOLBARBOX;
    }      
}  

showOnStart() = {
    IF sumUnreadMessages(currentUser()) > 0 THEN {
        deliveredNotificationAction(currentUser());
        apply();
        SHOW shortChat NOMANAGESESSIONX;
    }
}

onClientStarted() += { showOnStart(); }
onWebClientStarted() += { showOnStart(); }

pushAction(BOOLEAN system, BOOLEAN notificate) = {
    ACTIVE FORM fullChat;
    IF isActiveForm() AND NOT system THEN {
        seekLastMessageInFullChat();
        formRefresh();
    }
    ELSE {
        ACTIVE FORM shortChat;
        IF isActiveForm() THEN {
            formRefresh();
            SEEK LAST shortChat.m;
        } 
        ELSE {
            IF system OR notificate THEN {
                NEWSESSION {
                    SHOW shortChat;
                }
            }
        }
    }
}

seekLastMessageInFullChat() += {
    SEEK LAST fullChat.m;
}

pushNotification (CustomUser user, BOOLEAN system, BOOLEAN notificate) += {
    FOR user(Connection conn) == user AND connectionStatus(conn) == ConnectionStatus.connectedConnection AND conn != currentConnection() DO {
        NEWSESSION { NEWTHREAD pushAction(system AS BOOLEAN, notificate AS BOOLEAN); CONNECTION conn; }
    }
}

recentVisible() += ACTIVE TAB fullChat.recent;
sendMessage(Chat chat, CustomUser user) += {
    IF recentVisible() THEN sendMessage(chat); ELSE sendMessage(user);
}

seekChat(CustomUser user) += {
    LOCAL chat = Chat();
    chat() <- chatIn(user, currentUser());
    IF NOT chat() THEN {
        chatNotFound() <- TRUE;
        //prevUser тут - предыдущий выбранный user на форме
        markSeenOnChange(chatIn(prevUser(), currentUser()));
    } ELSE {
        chatNotFound() <- NULL;
        SEEK fullChat.c = chat();
        SEEK LAST fullChat.m;
        markSeenOnChange(chat());
    }
    prevUser() <- user;
}

NAVIGATOR {
    ADD fullChat IMAGE '/images/chat.png' BEFORE Authentication.account;
}