MODULE Chat;

REQUIRE Authentication, Integration, Time, SystemEvents, Utils;

CLASS Chat 'Чат';
TABLE chat(Chat);
TABLE chatCustomUser(Chat, CustomUser);

@defineExternalizable(chat, VARSTRING[100]);

in 'Вкл.' = DATA BOOLEAN (Chat, CustomUser);
in (Chat c) = in(c, currentUser()); 
isDialog(Chat chat) = [=GROUP SUM 1 IF in(chat, CustomUser user) BY chat](chat) == 2;
chatIn(user1, user2) = GROUP MAX Chat chat IF in(chat, CustomUser user1) AND in(chat, CustomUser user2) AND isDialog(chat) BY user1, user2;
readonly 'Только чтение' = DATA BOOLEAN (Chat, CustomUser);
readonly 'Только чтение' (Chat c) = readonly(c, currentUser());

dataName 'Имя' = DATA VARISTRING[100] (Chat);
nameOrLogin 'Пользователь' (CustomUser user) = OVERRIDE login(user), name(user);
concatName (Chat chat) =  GROUP CONCAT nameOrLogin(CustomUser user), ',' IF in(chat, user) AND NOT user == currentUser() BY chat;
name 'Имя' (Chat chat) = (OVERRIDE [=GROUP CONCAT nameOrLogin(CustomUser user), ',' IF in(chat, user) AND (NOT isDialog(chat) OR NOT user == currentUser()) BY chat](chat), dataName(chat)) MINCHARWIDTH 15 PREFCHARWIDTH 30;

CLASS MessageStatus {
    sent 'Отправлено',
    delivered 'Доставлено',
    seen 'Прочитано'
}

CLASS Message 'Сообщение';
TABLE message(Message);
TABLE messageCustomUser(Message, CustomUser);

pushNotification 'Отправить уведомление пользователю' = ACTION ABSTRACT LIST (CustomUser, BOOLEAN);
seekLastMessageInFullChat = ACTION ABSTRACT LIST ();
markSeenOnChange = ACTION ABSTRACT LIST (Chat);

author 'Автор' = DATA CustomUser (Message);
nameAuthor 'Автор' (Message message) = nameOrLogin(author(message)) MAXCHARWIDTH 30 PREFCHARWIDTH 30;
text 'Текст' = DATA TEXT (Message) MINCHARWIDTH 50;
dateTime 'Время' = DATA DATETIME (Message) MAXCHARWIDTH 30 PREFCHARWIDTH 30;
system 'Системное' = DATA BOOLEAN (Message);
status 'Статус' = DATA MessageStatus (Message, CustomUser);
captionStatus 'Статус' (Message message, CustomUser user) = staticCaption(status(message, user));
captionStatus 'Статус' (Message message) = captionStatus(message, currentUser());
chat = DATA Chat (Message);
nameChat 'Чат' (Message message) = name(chat(message)) MINCHARWIDTH 30 PREFCHARWIDTH 30;
nameShortChat 'Чат' (Message message) = IF isDialog(chat(message)) THEN nameChat(message) ELSE (nameChat(message) + ' [' + nameAuthor(message) + ']') MINCHARWIDTH 15 PREFCHARWIDTH 30;

readonly (Message message) = readonly(chat(message));
editable (Message message) = NOT readonly(message);

own(Message message) = author(message) == currentUser();
seenCount(Message message) = GROUP SUM 1 IF status(message, CustomUser user) == MessageStatus.seen BY message;
 
unreadMessages 'Непрочитанных' (chat, user) = GROUP SUM 1 IF (NOT status(Message message, CustomUser user) == MessageStatus.seen) AND (author(message) != user) BY chat(message), user;
unreadMessages'Непрочитанных' (Chat chat) = unreadMessages(chat, currentUser()) MAXCHARWIDTH 10 PREFCHARWIDTH 10;
unreadMessages 'Непрочитанных' (CustomUser user) = unreadMessages(chatIn(user, currentUser()), currentUser()) MAXCHARWIDTH 10 PREFCHARWIDTH 10;
//sumUnreadMessages 'Всего непрочитанных' (CustomUser user) = GROUP SUM unreadMessages(Chat chat, CustomUser user) IF in(chat, user) BY user;

chatNotFound = DATA LOCAL BOOLEAN ();
defaultNewMessage 'Новое сообщение' = DATA LOCAL TEXT ();
chatNewMessage 'Новое сообщение' = DATA LOCAL TEXT (Chat);
newMessage 'Новое сообщение' (Chat chat) = DATA LOCAL TEXT (Chat);

onStarted() += ACTION {
    LOCAL systemChat = Chat();
    systemChat() <- chat('system');
    IF NOT systemChat() THEN {
        FOR ADDOBJ c = Chat DO {
            id(c) <- 'system';
            dataName(c) <- 'Все'; 
            FOR(login(User u) AND lastActivity(u)) DO {
                in(c, u) <- TRUE;
            }
            systemChat() <- c;
        }
    }
    
    FOR system(Message m) DO {
        status(m, CustomUser u) <- MessageStatus.seen;
    }
}

setSeenMessageUser(Message m, CustomUser user, BOOLEAN system) = ACTION {
    status(m, user) <- IF system THEN MessageStatus.sent ELSE MessageStatus.seen;
}

markSeenOnChangeMessages (Chat chat, CustomUser user) = ACTION {
    LOCAL needApply = BOOLEAN();
    FOR in(chat) AND chat(Message m) == chat AND (status(m, user) == MessageStatus.sent OR status(m, user) == MessageStatus.delivered) DO {
        status(m, user) <- MessageStatus.seen;
        needApply() <- TRUE;
    }
    IF needApply() THEN {
        APPLY NESTED defaultNewMessage[], chatNewMessage[Chat] {};
    }
};

sendMessage 'Написать в чат' (Chat chat, TEXT message, BOOLEAN system) = ACTION {
    FOR ADDOBJ m = Message DO {
        chat(m) <- chat;
        dateTime(m) <- currentDateTime();
        author(m) <- currentUser();
        system(m) <- system;
        text(m) <- message;
        IF chatNotFound() THEN
            defaultNewMessage() <- NULL
        ELSE
            chatNewMessage(chat) <- NULL; 
        
        setSeenMessageUser(m, currentUser(), system);
        FOR in(chat, CustomUser user) AND user != currentUser() DO {
            status(m, user) <- MessageStatus.sent;
        }            
    }
    APPLY NESTED defaultNewMessage[], chatNewMessage[Chat] {};
    
    NEWSESSION NEWTHREAD {
        FOR in(chat, CustomUser user) AND (user != currentUser() OR system) DO {
            pushNotification(user, system);
        }          
    }
    
    IF NOT system THEN
        markSeenOnChangeMessages(chat, currentUser());
    seekLastMessageInFullChat();
}

sendMessage 'Отправить' = ACTION ABSTRACT LIST (Chat, CustomUser) EDITKEY 'ctrl ENTER';

restartServer() += ACTION { sendMessage(chat('system'), 'Сервер будет остановлен через 5 минут!\nСохраните текущую работу и выйдите из приложения.', TRUE); }

cancelRestartServer() += ACTION { sendMessage(chat('system'), 'Остановка сервера отменена', TRUE); }

seekChat = ACTION ABSTRACT(CustomUser);
  
saveNewMessage(Chat c) = ACTION {
    REQUEST TEXT INPUT;
    IF requestedText() THEN {
        newMessage(c) <- requestedText();
        IF chatNotFound() THEN
            defaultNewMessage() <- newMessage(c)
        ELSE 
            chatNewMessage(c) <- newMessage(c);
    }
    
}  
  
FORM editChat 'Чат'
    OBJECTS c = Chat FIXED PANEL
    PROPERTIES (c) name
    
    OBJECTS u = CustomUser
    PROPERTIES(u) login READONLY, name
    PROPERTIES(c,u) TODRAW u in, readonly 
    
    FILTERGROUP in FILTER 'Включены в чат' in(c,u)          

    EDIT Chat OBJECT c
;  

editChatAction 'Редактировать' () = ACTION {
    FORM editChat MODAL;
}
//----------------------------FULL CHAT----------------------------//

recentVisible  = ABSTRACT BOOLEAN ();
readonlyFullChat(Chat chat) = readonly(chat) AND recentVisible();
prevUser() = DATA LOCAL NESTED CustomUser();

backgroundUnread 'Цвет' (Chat chat) = RGB(255, 0, 0) IF unreadMessages(chat);
backgroundUnread 'Цвет' (CustomUser user) = RGB(255, 0, 0) IF unreadMessages(user);

online (CustomUser user) = subtractSeconds(lastActivity(user), currentDateTime()) < 300;
away (CustomUser user) = subtractSeconds(lastActivity(user), currentDateTime()) < 3600;

backgroundUser (CustomUser user) = IF online(user) THEN RGB(0, 255, 0) ELSE IF away(user) THEN RGB(255, 255, 0);

backgroundMessage (Message m) = IF NOT own(m) THEN RGB(255, 255, 255) ELSE IF seenCount(m) < 2 THEN RGB(247, 247, 247) ELSE RGB(240, 244, 248);

markSeenMessages (CustomUser user) = ACTION {
    FOR in(chat(Message m)) AND status(m, user) == MessageStatus.delivered DO {
        status(m, user) <- MessageStatus.seen;
    }
};

markSeenOnChange(Chat c) += ACTION {
    markSeenOnChangeMessages(c, currentUser());
    seekLastMessageInFullChat();
};

markSeenOnChange(Message m) = ACTION { 
    markSeenOnChangeMessages(chat(m), currentUser());
};

FORM fullChat 'Чат'
    OBJECTS c = Chat
    PROPERTIES(c) READONLY name ON SHORTCUT editChatAction(), unreadMessages BACKGROUND backgroundUnread(c)
    PROPERTIES(c) FORCE PANEL TOOLBAR ADDFORM
    PROPERTIES(c) newMessage READONLYIF readonlyFullChat(c) FORCE PANEL ON CHANGE saveNewMessage(c)
    
    EVENTS ON INIT markSeenOnChange(c)
    EVENTS ON CHANGE c markSeenOnChange(c)
    EVENTS ON CLOSE markSeenOnChange(c)

    OBJECTS u = CustomUser
    PROPERTIES(u) login READONLY, name, lastActivity READONLY BACKGROUND backgroundUser(u), unreadMessages BACKGROUND backgroundUnread(u) 
    
    EVENTS ON INIT seekChat(u)
    EVENTS ON CHANGE u seekChat(u)
    
    FILTERGROUP in FILTER 'Только активные' away(u)  
    FILTERS u != currentUser(), login(u), lastActivity(u)
    ORDER BY lastActivity(u) DESC
    
    PROPERTIES(c, u) FORCE PANEL sendMessage
    
    OBJECTS m = Message LAST
    PROPERTIES(m) READONLY BACKGROUND backgroundMessage(m) nameAuthor, text, dateTime
    
    EVENTS ON CHANGE m markSeenOnChange(m)    
        
    FILTERS in(c), chat(m) == c AND (NOT chatNotFound() OR recentVisible()), status(m, currentUser())
    
    DIALOG Chat OBJECT c
;

DESIGN fullChat {
    main {
        NEW topMain {
            type = SPLITH;
            fill = 1;
            NEW left {
                fill = 0.3;
                type = TABBED;
       
                NEW contacts {
                    caption = 'Контакты';
                    MOVE u.box { caption = 'Контакты'; }
                }
                NEW recent {
                    caption = 'Чаты';
                    MOVE c.box { caption = 'Чаты'; } 
                }                         
                
            }
            NEW right {
                type = SPLITV;
                fill = 0.7;
                MOVE m.box { 
                    fill = 0.8; 
                    PROPERTY(text(m)) {
                        minimumWidth = 300;
                    }                       
                }
                            
                NEW bottom {   
                    fill = 0.2; 
                    type = CONTAINERV;
                    MOVE PROPERTY(newMessage(c)) {
                        fill = 1; 
                        panelCaptionAbove = TRUE;
                    }           
                    MOVE PROPERTY(sendMessage(c, u)) {
                        font = 'bold 24';
                    }
                }
            }            
        }
        MOVE functions.box;
    }           
}

sendMessage 'Написать в чат' (Chat chat) = ACTION {
    IF newMessage(chat) THEN
        sendMessage(chat, newMessage(chat), NULL);
}

sendMessage 'Написать пользователю' (CustomUser user) = ACTION {
    LOCAL chat = Chat();
    chat() <- chatIn(user, currentUser());
    IF NOT chat() THEN {
        FOR ADDOBJ chat = Chat DO {
            in(chat, user) <- TRUE;
            in(chat, currentUser) <- TRUE WHERE currentUser == currentUser();
            newMessage(chat) <- defaultNewMessage();
            sendMessage(chat);
            SEEK fullChat.c = chat;
        } 
    } ELSE sendMessage(chat());
}


//----------------------------SHORT CHAT----------------------------//

deliveredNotificationAction(CustomUser user) += ACTION {
    FOR in(chat(Message m)) AND status(m, user) == MessageStatus.sent DO {
        status(m, user) <- MessageStatus.delivered;
    }
}

closeChat 'Закрыть' = ACTION { 
    markSeenMessages(currentUser());
    apply(); 
    formClose();
}

reply 'Ответ' = DATA LOCAL TEXT (Message);
replyChat 'Ответить' (Chat c, Message m) = ACTION {
    IF(reply(m)) THEN {
        markSeenMessages(currentUser());
        newMessage(c) <- reply(m);
        sendMessage(chat(m));
        formClose();
    }
};

replyChat 'Ответить' (Message m) = ACTION { 
    replyChat(chat(m), m);
} EDITKEY 'ctrl ENTER';

openChat 'Перейти в чат' (Chat c, Message m) = ACTION {
    markSeenMessages(currentUser());
    FORM fullChat DOCKED;
    NEWSESSION { NEWTHREAD {
        ACTIVATE TAB recent FORM fullChat;
        SEEK fullChat.c = chat(m);
        SEEK LAST fullChat.m;
        newMessage(c) <-reply(m);
    } CONNECTION currentConnection(); }
    APPLY NESTED newMessage[Chat], reply[Message] {};
    formClose();
};

openChat 'Перейти в чат' (Message m) = ACTION {
    openChat(chat(m), m);
};

FORM shortChat 'Новое сообщение' DOCKEDMODAL
OBJECTS m = Message LAST
PROPERTIES(m) READONLY nameShortChat, text, dateTime
PROPERTIES(m) FORCE PANEL reply READONLYIF readonly(m), replyChat SHOWIF editable(m), openChat
PROPERTIES() closeChat
FILTERS in(chat(m)), status(m, currentUser()), status(m, currentUser()) != MessageStatus.seen
EVENTS ON CLOSE markSeenOnChange(m)
;

DESIGN shortChat {
    main {
        m.box {
            fill = 0.7;
        }
        MOVE PROPERTY(reply(m)) {
            panelCaptionAbove = TRUE;   
            fill = 0.3;
        }
        NEW buttons {
            type = CONTAINERH;
            MOVE PROPERTY(replyChat(m));
            MOVE PROPERTY(openChat(m));
            MOVE PROPERTY(closeChat());
        }
        REMOVE functions.box;
    }      
}  

//afterClientStarted() += ACTION {
//    IF sumUnreadMessages(currentUser()) > 0 THEN
//        FORM shortChat MODAL;
//}

pushAction(BOOLEAN system) = ACTION {
    ACTIVE FORM fullChat;
    IF isActiveForm() AND NOT system THEN {
        //APPLY NESTED defaultNewMessage[], chatNewMessage[Chat] {};
        seekLastMessageInFullChat();
        formRefresh();
    }
    ELSE {
        ACTIVE FORM shortChat;
        IF isActiveForm() THEN {
            formRefresh();
            SEEK LAST shortChat.m;
        } 
        ELSE {
            NEWSESSION {
                FORM shortChat MODAL;
            }
        }
    }
}

seekLastMessageInFullChat() += ACTION {
    SEEK LAST fullChat.m;
}

pushNotification (CustomUser user, BOOLEAN system) += ACTION {
    FOR user(Connection conn) == user AND connectionStatus(conn) == ConnectionStatus.connectedConnection AND conn != currentConnection() DO {
        NEWSESSION { NEWTHREAD pushAction(system AS BOOLEAN) CONNECTION conn; }
    }
}

recentVisible() += ACTIVE TAB recent FORM fullChat;
sendMessage(Chat chat, CustomUser user) += ACTION {
    IF recentVisible() THEN sendMessage(chat) ELSE sendMessage(user);
}

fillChat(Chat chat, CustomUser user) = ACTION {
    in(chat, user) <- TRUE;
    in(chat, currentUser) <- TRUE WHERE currentUser == currentUser();
}

seekChat(CustomUser user) += ACTION {
    LOCAL chat = Chat();
    chat() <- chatIn(user, currentUser());
    IF NOT chat() THEN {
        chatNotFound() <- TRUE;
        //prevUser тут - предыдущий выбранный user на форме
        markSeenOnChange(chatIn(prevUser(), currentUser()));
    } ELSE {
        chatNotFound() <- NULL;
        SEEK fullChat.c = chat();
        SEEK LAST fullChat.m;
        markSeenOnChange(chat());
    }
    prevUser() <- user;
}

NAVIGATOR {
    ADD fullChat IMAGE '/images/chat.png' BEFORE Authentication.account;
}